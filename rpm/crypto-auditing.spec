# Generated by rust2rpm 24, modified by hand
%bcond_without check

# TODO: vendoring=0 is not working yet, not even close
%global vendoring 1

# TODO:         https://docs.fedoraproject.org/en-US/packaging-guidelines/Rust
#               says the name must be rust-$crate.
#               kata-containers and keylime agent use -rust suffix instead.
#               We'd prefer not having rust-,
#               but rust2rpm 24 now enforces it for subpackages
Name:           rust-crypto-auditing
Version:        0.1.0
Release:        %autorelease
Summary:        Event collector agent for crypto-auditing project

License:        GPL-3.0-or-later GPL-2.0 and Apache-2.0 and MIT and ISC and Unicode-DFS-2016 and BSD-2-Clause and BSD-3-Clause
# it is not published on crates.io (yet?)
# so for now it's generated using
# `./generate_source_tarballs.sh $source_dir $version $out_dir`
URL:            https://github.com/latchset/crypto-auditing
Source0:        crypto-auditing-%{version}.tar.zstd
# moreover, we use vendoring, which is forbidden by Fedora packaging guidelines
Source1:        crypto-auditing-%{version}-vendor.tar.zstd

BuildRequires:  rust-packaging >= 21
# <manually specified build dependencies>
BuildRequires:  kernel-devel
BuildRequires:  bpftool
BuildRequires:  make
BuildRequires:  libbpf-devel
BuildRequires:  llvm-devel
BuildRequires:  rustfmt
BuildRequires:  zstd
# </manually specified build dependencies>

%global _description %{expand:
Event collector agent for crypto-auditing project.}

%description %{_description}

%prep
%autosetup -n crypto-auditing-%{version_no_tilde} -p1
%cargo_prep

# <getting creative with vendoring>
%if 0%{?vendoring}
tar xf %{SOURCE1}
# FIXME fragile: tweaking .cargo/config to use vendored sources
sed -i 's|replace-with = "local-registry"|replace-with = "vendored-sources"|' \
    .cargo/config
cat >> .cargo/config <<EOF
[source.vendored-sources]
directory = "vendor"
EOF
%else
%generate_buildrequires
%cargo_generate_buildrequires
%endif
# </getting creative with vendoring>

# <generating vmlinux.h> -- agent only
cp $(rpm -ql kernel-devel | grep '/vmlinux.h$' | tail -1) agent/src/bpf/
# </generating vmlinux.h>

%build
%cargo_build

# <subpackages: types>
%define crate_instdir %{cargo_registry}/crypto-auditing-types-%{version_no_tilde}
%package        types-devel
Summary:        %{summary}
BuildArch:      noarch

%description    types-devel %{_description}

This package contains library source intended for building other packages which
use the "%{crate}" crate.

%files          types-devel
# FIXME: no license files detected
# <license files>
# TODO: we will have to ship all of them, including transitive deps, right?
# </license files>
%{crate_instdir}/

%package     -n %{name}-types+default-devel
Summary:        %{summary}
BuildArch:      noarch

%description -n %{name}-types+default-devel %{_description}

This package contains library source intended for building other packages which
use the "default" feature of the "%{crate}" crate.

%files       -n %{name}-types+default-devel
%ghost %{crate_instdir}/Cargo.toml
# </subpackages: types>

# <subpackages: agent>
%define crate_instdir %{cargo_registry}/crypto-auditing-agent-%{version_no_tilde}
%package agent
Summary: crypto-auditing: agent application
%description agent
crypto-auditing project: agent application
%files agent
# TODO: license files
%{_bindir}/crypto-auditing-agent
# </subpackages: agent>

# <subpackages: log-parser>
%define crate_instdir %{cargo_registry}/crypto-auditing-log-parser-%{version_no_tilde}
%package log-parser
Summary: crypto-auditing: log parser application
%description log-parser
crypto-auditing project: log parser application
%files log-parser
# TODO: license files
%{_bindir}/crypto-auditing-log-parser
# </subpackages: log-parser>

# </install>
%install
pushd types
    # HACKY: depends on macro internals.
    # its detection assumes single-crate sources
    %define __cargo_is_lib() true
    %define __cargo_is_bin() false
    # Side-step cargo2rpm seeing a workspace and bailing
    mv ../Cargo.toml ../_Cargo.toml
    %cargo_install
    mv ../_Cargo.toml ../Cargo.toml
popd
pushd agent
    %define __cargo_is_lib() false
    %define __cargo_is_bin() true
    %cargo_install
popd
pushd log-parser
    %define __cargo_is_lib() false
    %define __cargo_is_bin() true
    %cargo_install
popd
# </install>

%if %{with check}
%check
%cargo_test -- --workspace .
%endif

%changelog
%autochangelog
